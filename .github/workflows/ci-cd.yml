name: CI/CD Pipeline - Social Media Reports System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Quality Assurance Jobs
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt
        
    - name: Code formatting check (Black)
      run: black --check --diff src/ tests/
      
    - name: Import sorting check (isort)
      run: isort --check-only --diff src/ tests/
      
    - name: Linting (Flake8)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Type checking (MyPy)
      run: mypy src/ --ignore-missing-imports
      
    - name: Security analysis (Bandit)
      run: bandit -r src/ -f json -o bandit-report.json
      
    - name: Dependency vulnerability check (Safety)
      run: safety check --json --output safety-report.json
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
        
    - name: Set up test environment
      run: |
        export DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb
        export REDIS_URL=redis://localhost:6379/0
        export APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: social-media-dashboard/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd social-media-dashboard
        npm ci
        
    - name: Run frontend linting
      run: |
        cd social-media-dashboard
        npm run lint
        
    - name: Run frontend unit tests
      run: |
        cd social-media-dashboard
        npm run test:coverage
        
    - name: Build frontend
      run: |
        cd social-media-dashboard
        npm run build
        
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: social-media-dashboard/dist/

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium pytest-selenium webdriver-manager
        cd social-media-dashboard && npm ci
        
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: social-media-dashboard/dist/
        
    - name: Start backend server
      run: |
        export DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb
        export APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
        cd src && python main.py &
        sleep 10
        
    - name: Start frontend server
      run: |
        cd social-media-dashboard
        npm run preview &
        sleep 5
        
    - name: Run E2E tests
      run: |
        pytest tests/ui/ -v --html=e2e-report.html --self-contained-html
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results
        path: |
          e2e-report.html
          screenshots/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pytest-benchmark
        
    - name: Start application
      run: |
        export DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb
        export APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
        cd src && python main.py &
        sleep 10
        
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-json=benchmark-results.json
        
    - name: Run load tests
      run: |
        locust -f tests/performance/test_load_testing.py --headless -u 10 -r 2 -t 60s --host=http://localhost:5000 --html=load-test-report.html
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          benchmark-results.json
          load-test-report.html

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest requests
        
    - name: Start application
      run: |
        export DATABASE_URL=sqlite:///test.db
        export APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
        cd src && python main.py &
        sleep 10
        
    - name: Run security tests
      run: |
        pytest tests/security/ -v --html=security-test-report.html --self-contained-html
        
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:5000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: |
          security-test-report.html
          report_html.html
          report_md.md

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: social-media-dashboard/dist/
        
    - name: Build Docker image
      run: |
        docker build -t social-media-reports:${{ github.sha }} .
        docker tag social-media-reports:${{ github.sha }} social-media-reports:latest
        
    - name: Save Docker image
      run: |
        docker save social-media-reports:latest | gzip > social-media-reports.tar.gz
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: social-media-reports.tar.gz

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, frontend-tests, e2e-tests, performance-tests, security-tests]
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results
        
    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        
    - name: Quality Gate Analysis
      run: |
        echo "Analyzing quality metrics..."
        
        # Check test coverage
        if [ -f coverage.xml ]; then
          COVERAGE=$(python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          print(f'{coverage:.2f}')
          ")
          echo "Test Coverage: $COVERAGE%"
          
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Quality Gate Failed: Test coverage below 80%"
            exit 1
          fi
        fi
        
        # Check security issues
        if [ -f bandit-report.json ]; then
          HIGH_ISSUES=$(python -c "
          import json
          with open('bandit-report.json') as f:
            data = json.load(f)
          high_issues = len([r for r in data.get('results', []) if r.get('issue_severity') == 'HIGH'])
          print(high_issues)
          ")
          echo "High Security Issues: $HIGH_ISSUES"
          
          if [ "$HIGH_ISSUES" -gt "0" ]; then
            echo "❌ Quality Gate Failed: High security issues found"
            exit 1
          fi
        fi
        
        echo "✅ Quality Gate Passed"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, quality-gate]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        
    - name: Load Docker image
      run: |
        docker load < social-media-reports.tar.gz
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: docker-compose up -d
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, quality-gate]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        
    - name: Load Docker image
      run: |
        docker load < social-media-reports.tar.gz
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification..."
        # Add verification commands here

  # Generate Reports
  generate-reports:
    name: Generate QA Reports
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate consolidated report
      run: |
        python -c "
        import json
        import os
        from datetime import datetime
        
        report = {
          'timestamp': datetime.now().isoformat(),
          'commit': '${{ github.sha }}',
          'branch': '${{ github.ref_name }}',
          'workflow_run': '${{ github.run_number }}',
          'quality_metrics': {}
        }
        
        # Add test coverage if available
        if os.path.exists('test-results/coverage.xml'):
          import xml.etree.ElementTree as ET
          tree = ET.parse('test-results/coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          report['quality_metrics']['test_coverage'] = coverage
        
        # Add security metrics if available
        if os.path.exists('security-reports/bandit-report.json'):
          with open('security-reports/bandit-report.json') as f:
            bandit_data = json.load(f)
          report['quality_metrics']['security_issues'] = len(bandit_data.get('results', []))
        
        with open('qa-report.json', 'w') as f:
          json.dump(report, f, indent=2)
        
        print('QA Report generated successfully')
        "
        
    - name: Upload QA report
      uses: actions/upload-artifact@v3
      with:
        name: qa-report
        path: qa-report.json
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('qa-report.json')) {
            const report = JSON.parse(fs.readFileSync('qa-report.json', 'utf8'));
            
            let comment = '## 🔍 QA Report\n\n';
            comment += `**Commit:** ${report.commit}\n`;
            comment += `**Workflow Run:** #${report.workflow_run}\n\n`;
            
            if (report.quality_metrics.test_coverage) {
              comment += `**Test Coverage:** ${report.quality_metrics.test_coverage.toFixed(2)}%\n`;
            }
            
            if (report.quality_metrics.security_issues !== undefined) {
              comment += `**Security Issues:** ${report.quality_metrics.security_issues}\n`;
            }
            
            comment += '\n✅ All quality checks passed!';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

